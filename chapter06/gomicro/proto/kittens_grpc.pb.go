// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/kittens.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Kittens_Hello_FullMethodName = "/proto.Kittens/Hello"
)

// KittensClient is the client API for Kittens service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KittensClient interface {
	Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type kittensClient struct {
	cc grpc.ClientConnInterface
}

func NewKittensClient(cc grpc.ClientConnInterface) KittensClient {
	return &kittensClient{cc}
}

func (c *kittensClient) Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Kittens_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KittensServer is the server API for Kittens service.
// All implementations must embed UnimplementedKittensServer
// for forward compatibility
type KittensServer interface {
	Hello(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedKittensServer()
}

// UnimplementedKittensServer must be embedded to have forward compatible implementations.
type UnimplementedKittensServer struct {
}

func (UnimplementedKittensServer) Hello(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedKittensServer) mustEmbedUnimplementedKittensServer() {}

// UnsafeKittensServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KittensServer will
// result in compilation errors.
type UnsafeKittensServer interface {
	mustEmbedUnimplementedKittensServer()
}

func RegisterKittensServer(s grpc.ServiceRegistrar, srv KittensServer) {
	s.RegisterService(&Kittens_ServiceDesc, srv)
}

func _Kittens_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KittensServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kittens_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KittensServer).Hello(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Kittens_ServiceDesc is the grpc.ServiceDesc for Kittens service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kittens_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Kittens",
	HandlerType: (*KittensServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Kittens_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kittens.proto",
}
